<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>jwt</title>
    <url>/2021/03/12/jwt/</url>
    <content><![CDATA[<p><strong>jwt的优点：</strong></p>
<p><strong>1. 可扩展性好</strong></p>
<p>应用程序分布式部署的情况下，session需要做多机数据共享，通常可以存在数据库或者redis里面。而jwt不需要。<br>**<br>2. 无状态**</p>
<p>jwt不在服务端存储任何状态。RESTful API的原则之一是无状态，发出请求时，总会返回带有参数的响应，不会产生附加影响。用户的认证状态引入这种附加影响，这破坏了这一原则。另外jwt的载荷中可以存储一些常用信息，用于交换信息，有效地使用 JWT，可以降低服务器查询数据库的次数。</p>
<p>jwt的缺点：</p>
<p><strong>1. 安全性</strong></p>
<p>由于jwt的payload是使用base64编码的，并没有加密，因此jwt中不能存储敏感数据。而session的信息是存在服务端的，相对来说更安全。</p>
<p><strong>2. 性能</strong></p>
<p>jwt太长。由于是无状态使用JWT，所有的数据都被放到JWT里，如果还要进行一些数据交换，那载荷会更大，经过编码之后导致jwt非常长，cookie的限制大小一般是4k，cookie很可能放不下，所以jwt一般放在local storage里面。并且用户在系统中的每一次http请求都会把jwt携带在Header里面，http请求的Header可能比Body还要大。而sessionId只是很短的一个字符串，因此使用jwt的http请求比使用session的开销大得多。</p>
<p><strong>3. 一次性</strong></p>
<p>无状态是jwt的特点，但也导致了这个问题，jwt是一次性的。想修改里面的内容，就必须签发一个新的jwt。</p>
<p>（1）无法废弃</p>
<p>通过上面jwt的验证机制可以看出来，一旦签发一个jwt，在到期之前就会始终有效，无法中途废弃。例如你在payload中存储了一些信息，当信息需要更新时，则重新签发一个jwt，但是由于旧的jwt还没过期，拿着这个旧的jwt依旧可以登录，那登录后服务端从jwt中拿到的信息就是过时的。为了解决这个问题，我们就需要在服务端部署额外的逻辑，例如设置一个黑名单，一旦签发了新的jwt，那么旧的就加入黑名单（比如存到redis里面），避免被再次使用。</p>
<p>（2）续签</p>
<p>如果你使用jwt做会话管理，传统的cookie续签方案一般都是框架自带的，session有效期30分钟，30分钟内如果有访问，有效期被刷新至30分钟。一样的道理，要改变jwt的有效时间，就要签发新的jwt。最简单的一种方式是每次请求刷新jwt，即每个http请求都返回一个新的jwt。这个方法不仅暴力不优雅，而且每次请求都要做jwt的加密解密，会带来性能问题。另一种方法是在redis中单独为每个jwt设置过期时间，每次访问时刷新jwt的过期时间。</p>
]]></content>
  </entry>
  <entry>
    <title>ElasticSearch</title>
    <url>/2021/03/05/ElasticSearch/</url>
    <content><![CDATA[<p>正向索引：文档-&gt;索引（文档先分词，再与索引匹配）<br><img src="https://pic1.zhimg.com/80/v2-a1e4026a11e5e4cb9250d0f2492dc14a_720w.jpg?source=1940ef5c"></p>
<p>倒排索引：索引-&gt;文档（索引作为关键词，文档作为Value）<br><img src="https://pic1.zhimg.com/80/v2-1293ebbcc98764f0d8c3cb8d31b79ae7_720w.jpg?source=1940ef5c"></p>
<p>ElasticSearch查询方式有哪几种？ </p>
<p>1.查询所有(match_all) </p>
<p>2.匹配查询(match) 会把查询条件进行分词，然后进行查询，多个词条之间默认关系是 OR。</p>
<p> 3.词条查询(term) 用于精确值 匹配，这些精确值可能是数字、时间、布尔或者那些未分词 的字符串。 </p>
<p>4.布尔组合(bool) 各种其它查询通过 must（与）、 must_not（非）、 should（或） 的方式进行组合。 </p>
<p>5.范围查询(range) 找出那些落在指定区间内的数字或者时间。 </p>
<p>6.模糊查询(fuzzy) fuzzy查询是 term`查询的模糊等价。它允许用户搜索词条与实际词 条的拼写出现偏差，但是偏差的编辑距离不得超过 2。</p>
]]></content>
  </entry>
  <entry>
    <title>Rest_ful</title>
    <url>/2021/03/05/Rest_ful/</url>
    <content><![CDATA[<p>资源。首先要明确资源就是网络上的一个实体，可以是文本、图片、音频、视频。资源总是以一定的格式来表现自己。文本用txt、html；图片用JPG、JPEG等等。而JSON是RESTful API中最常用的资源表现格式。</p>
<p>统一接口。对于业务数据的CRUD，RESTful 用HTTP方法与之对应</p>
<p>URI。统一资源标识符，它可以唯一标识一个资源。注意到，URL(统一资源定位符)是一种URI，因为它可以唯一标志资源。但URL != URI。应该说URL 是URI的子集。因为URL使用路径来唯一标识资源，这只是唯一标识资源的一种方式。还可以用一个唯一编号来标识资源，如example.html.fuce2da23。只不过这种方式并不被广泛使用。总之，要在概念上对URL和URI有所区分。</p>
<p>无状态。 所谓无状态是指所有资源都可以用URI定位，而且这个定位与其他资源无关，不会因为其他资源的变动而变化。这里引入一个幂等性的概念：无论一个操作被执行一次还是多次，执行后的效果都相同。比如对某资源发送GET请求，如果访问一次和访问十次获得的数据一样，那么就说这个请求具有幂等性。</p>
<p>URL中只能有名词，不能出现动词。这是因为在REST要求对资源的操作由HTTP 方法给出，而方法是由HTTP 请求报文头部给出的，自然不需要在URL中暴露操作方式。</p>
<p><a href="https://www.jianshu.com/p/dbee5199cf23">https://www.jianshu.com/p/dbee5199cf23</a></p>
<p>转载至&lt;-</p>
]]></content>
  </entry>
  <entry>
    <title>mybatis</title>
    <url>/2021/03/05/mybatis/</url>
    <content><![CDATA[<p>一级缓存和二级缓存：<br>一级缓存（sqlSession）：同一个sqlSession相同的sql语句会接收到这个缓存，sqlSession关闭或者sql语句的update、delete、insert等操作commit后都会清空缓存。<br>二级缓存（基于namespace和mapper）</p>
]]></content>
  </entry>
  <entry>
    <title>JUC notes</title>
    <url>/2021/02/20/JUC/</url>
    <content><![CDATA[<p>1.请谈谈你对volatile的理解？</p>
<p>java虚拟机提供轻量级的同步机制，保证可见性、不保证原子性、禁止指令重排。</p>
<p>2.JMM（Java内存模型）：</p>
<p>一种规范（线程是在主内存中交换属性的）（可见性（其他线程修改的值，本线程会了解）、原子性（不可分割，保证数据的完整一致性、要么一起成功、要么一起失败）、有序性）</p>
<p>线程解锁前，必须把共享变量的值刷回主内存。</p>
<p>线程加锁前，必须把最新值加入主内存。</p>
<p>加锁和解锁是同一把锁</p>
<p>3.a++不是一种原子性操作？查看字节码</p>
<p>4.如何解决原子性？</p>
<p>加syn</p>
<p>使用JUC包下的Atom类（原子类）（AtomInteger）</p>
<p>5.防止指令重排？</p>
<p>通过插入内存屏障禁止在内存屏障前后的指令执行重排序。</p>
<p>写操作时加入一条store指令，将工作内存的共享变量刷回主内存。（防止上面的普通写和volatile写重排序、防止volatile写和下面的volatile读写重排序）</p>
<p>读操作时加入一条load指令，从主内存中读取共享变量。（防止下面的读写操作和volatile读操作重排序）</p>
<p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Faliyunzixunbucket.oss-cn-beijing.aliyuncs.com%2Fjpg%2F60b12e43a5374792fd4aea815e6ae958.jpg%3Fx-oss-process%3Dimage%2Fresize%2Cp_100%2Fauto-orient%2C1%2Fquality%2Cq_90%2Fformat%2Cjpg%2Fwatermark%2Cimage_eXVuY2VzaGk%3D%2Ct_100&refer=http%3A%2F%2Faliyunzixunbucket.oss-cn-beijing.aliyuncs.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1616227394&t=2df820cb51c05722f54cee8dc3e80cd3"></p>
<p>6.哪些地方要用volatile？</p>
<p>单例模式多线程情况下使用，双重检测可能会发生指令重排，因为创建对象会进行分配内存空间、初始化对象、设置intance指向内存空间、此时instance!=null，没有使用volatile初始化和指向内存空间可能会发生指令重排，对象就没有完成初始化。</p>
<p>7、单例模式饿汉式？<br>synchronized＋双重检测机制。</p>
<p>8.CAS是什么？（ABA问题）<br>Compare and Set<br>期望值和当前值做对比，如果没有发生改变就可以当做当前没有发生改变，则操作成功，否则重做一次指令。<br>compareandSet（expect，update）</p>
<p>9.Unsafe？</p>
<p>CAS依赖于Unsafe类，Unsafe类可以像根据内存偏移地址进行加一操作。因此JVM实现出CAS汇编指令，完全依赖于硬件，从而实现原子性。这种本来就是连续的不会被打断。</p>
<p>UnSafe＋CAS思想（自旋锁）</p>
<p>10.CAS缺点</p>
<p>循环开销大、只能保证一个共享变量的原子操作、ABA问题(使用版本号进行解决)。</p>
<p>原子引用AtomicReference&lt;类&gt;，原子类的生成。<br>原子时间戳类（用时间戳作为版本号解决ABA问题）AtomicStampedReference类解决，里面有一个stamp和一个类，stamp为时间戳。</p>
<p>11.线程不安全异常（并发修改异常ConcurrentModificationException）？</p>
<p>故障现象、导致原因、解决方案、优化建议（同样的错误不犯第二次）</p>
<p>12.ArrayList线程不安全</p>
<p>vector线程安全，因为加了synchronized，但并发性急剧下降。</p>
<p>Collections.synchronizedList(),在Arraylist外层添加一个synchronized表皮，保证原子性。</p>
<p>copyOnWriteArrayList，这是存在于JUC中的类，解决了原子性问题。先加锁，加锁后获取旧的数组，复制旧数组到新数组，且新数组包含了插入数据，新数组复制回原来的数组中，最后解锁。运用的是读写分离的思想，读写的容器不是同一个容器。</p>
<p>Set与Arraylist也是一样（Collections。synchronizedSet和CopyOnWriteArraySet（底层还是CopyOnWriteArraylist））。</p>
<p>hashSet底层是hashMap，hashSet只关心key，不关心value，value是一个常量Object。</p>
<p>HashMap有ConcurrentHashMap（important）</p>
<p>13.String=“abc”，是查找常量池中是否有abc字符串，从而创建对象，而方法中查找xxx字符串不关abc字符串的事。</p>
<p>14.公平锁和非公平锁？<br>ReentrantLock（true or false）</p>
<p>公平锁即不能够插队，按照申请锁的顺序，非公平锁即能够插队，不一定按照申请锁的顺序，有可能造成优先级翻转和饥饿现象，非公平锁优点在于吞吐量比公平锁大。</p>
<p>15.可重入锁（递归锁）<br>代码获取了锁，代码中的代码也可以获取到锁，内层自动获取锁，二者的锁是同一把锁。（ReentrantLock和synchronized是可重入锁）<br>作用：避免死锁。加锁几次就需要解锁几次，否则会卡死。</p>
<p>16.自旋锁：<br>尝试获取锁的线程不会立即阻塞，而是通过循环的方式尝试获取锁，好处减少线程上下文切换的消耗，缺点循环会消耗CPU。</p>
<p>17.独占锁（写锁）：只能被一个线程持有 共享锁（读锁）：可以被多个线程持有。<br>读写锁（ReentrantReedWriteLock，读锁readlock，写锁writelock）读读共享，读写分离，写写分离。<br>写（原子＋独占）</p>
<p>18.countdownLatch倒计时发射火箭，即count！=0时，线程阻塞，等于0后，线程执行。使用countdown方法对count进行减一操作。await方法等到count为0线程继续执行。</p>
<p>19.cyclicBarrier集齐才能发射火箭，即count!=my_count，线程阻塞，加1等于my_count，线程执行，有一个屏障，先到的线程被阻塞。</p>
<p>20.semaphore信号量，一个用于多个共享资源互斥使用，并发线程的数量控制。acquire相当于占用，release相当于释放。</p>
<p>21.阻塞队列</p>
<p>队列＋阻塞队列，</p>
<p><strong>ArrayBlockQueue：有数组组成的有界阻塞队列。</strong></p>
<p><strong>LinkedBlockQueue：有链表组成的有界阻塞队列（大小为Integer.MAX_VALUE）。</strong></p>
<p>PriorityBlockQueue：支持优先级的无界阻塞队列。</p>
<p>DelayBlockQueue：使用优先级的延迟无界阻塞队列。</p>
<p><strong>SynchronousQueue：不存储元素的阻塞队列，即单个元素的队列。</strong></p>
<p>LinkedTransferQueue：有链表组成的无界阻塞队列。</p>
<p>LinkBlockDeque：有链表组成的双向阻塞队列。</p>
<p>ArrayBlockQueue：add、remove、element满空时抛出异常，offer、poll、peek满空时返回特殊值，true、false、null，put、take满空时一直阻塞，直到释放。offer（value，time）、poll（value，time）满空时超时就返回特殊值。</p>
<p>SynchronousQueue，产生一个消费一个。</p>
<p>22.消费者生产者模式传统要使用while，不能用if，两个才能用if，因为如果是if则不会判断多一次，会导致消费者和生产者破坏掉。</p>
<p>23.synchronized和lock有什么区别，</p>
<p>synchronized关键字，属于jvm层面，底层是一个monitor对象，lock是一个具体类。</p>
<p>synchronized不需要手动释放，lock需要手动释放。如果没有主动释放，会导致死锁现象。</p>
<p>synchronized不可中断，lock是可以中断，更加灵活。 超时方法trylock超时，lockInterruptibly调用interrupt方法中断。</p>
<p>加锁是否公平，两者都默认非公平锁，synchronized只能是非公平锁，而lock可以公平也可以非公平。</p>
<p>锁绑定多个condition，synchronized没有，ReentrantLock用来实现分组唤醒，也可以精确唤醒，而不像synchronized要么唤醒一个线程要么全部唤醒。</p>
<p>24.新版相比传统的阻塞队列来说，阻塞队列需要自己处理细节，什么时候需要阻塞队列，什么时候需要释放队列。</p>
<p>25.callable，futureTask（new mythread），new Thread（futureTask，”AA”）;callable建议放到最后，不会阻塞main线程。相比阻塞，循环会好点，所以可以使用while（futuretask.isDone（）），同一个futureTask会复用，不会多执行一次。</p>
<p>26.线程池的优势</p>
<p>降低资源消耗速度，重复利用创建的线程来降低消耗。</p>
<p>提高响应速度，当任务到达时，任务不用等到线程创建就立即执行。</p>
<p>提高线程可管理性，控制线程数，对线程池进行统一调配。</p>
<p>27.线程池种类。<br>Executors.newFixedThreadPool固定大小线程池，执行长期任务。</p>
<p>Executors.newSingleThreadPool一个任务一个线程池。</p>
<p>Executors.newCacheedThreadPool执行小任务，一个池N个线程。</p>
<p>ThreadLocalExecutor自定义线程池，上面线程池也是用这个，execute()<br>7大参数，corepoolsize核心线程数，<br>maximumpoolsize最大线程数，只有阻塞队列满了才开启。<br>keepAlivetime保持生存时间，主要是删除除核心线程的其他线程，<br>unit 生存时间单位，<br>workqueue任务队列，<br>threadFactory线程工程，<br>handler拒绝策略（默认AbortPolicy抛出异常，CallerRunsPolicy不抛弃任务，而是回退给调用者，让main自己做，DiscardOldestPolicy抛弃队列等待最久的任务，DiscardPolicy直接丢弃任务）。</p>
<p>建议使用自定义线程池，因为其他会出现OMM问题，因为里面的阻塞队列几乎是无界。</p>
<p>28.如何配置合理线程数？<br>CPU密集型：CPU核数+一个线程数，（CPU全速运行），<br>IO密集型：CPU核数*2、CPU核数/1-阻塞系数。（IO经常阻塞，CPU不是全速运行。）</p>
<p>29.定位死锁线程</p>
<p>window jqs -l 定位进程号 或者jstack 进程编号</p>
<p>linux ls -l</p>
<p>30.lock比较Synchronized来说更加的自由一点，Lock能设置过期时间，而synchronized不能。</p>
]]></content>
  </entry>
  <entry>
    <title>Redis notes</title>
    <url>/2021/02/20/Redis/</url>
    <content><![CDATA[<p>1.redis五大传统类型的落地应用<br>String<br>list<br>hash<br>set<br>zset<br>bitmap（位图）<br>HyperLogLog（统计）<br>GEO（地理）<br>Steam（流）</p>
<p>2.命令不区分大小写，key区分大小写。6379，help @命令</p>
<p>3.String获取多个键值（MSET）、递增数字（INCR）、字符串长度（STRLEN）、分布式锁（setnx、可以设置多久解锁或者保留值多久）<br>商品编号、订单号、点赞数采用INCR命令生成。</p>
<p>4.Hash,hmset、hmget（一次多个设置字段值）、删除一个key（hdel）、获取所有字段值（hgetall key）、hincrby（自增）<br>购物车场景</p>
<p>5.list，左增（lpush）、<br>队列、双向队列、比如：微信订阅关注号</p>
<p>6.set，增加（sadd）、删除（SREM）、罗列（Smembers）、判断是否在集合里（SISMEMBER）、SPOP（随机弹出一个属性并删除）、SCARD（获取个数）、SRANDMEMBER（随机弹出一个属性不删除）、差集（SDIFF）、交集（SINTER）、并集（SUNION）<br>应用场景：微信抽奖小程序、QQ可能认识的人、微博互相关注、微信点赞</p>
<p>7.zset，增加（zadd）、获取一段数据（ZRANGE）<br>应用场景：抖音热搜、商品销售量</p>
<p>8.Redis分布式锁：redis是单线程的，redLock、</p>
<p>9.Redis单点部署问题：</p>
<p>10.nginx：是一个高性能的HTTP和反向代理web服务器<br>Tomcat运行在JVM之上，它和HTTP服务器一样，绑定IP地址并监听TCP端口，同时还包含以下指责：管理Servlet程序的生命周期将URL映射到指定的Servlet进行处理与Servlet程序合作处理HTTP请求——根据HTTP请求生成HttpServletResponse对象并传递给Servlet进行处理，将Servlet中的HttpServletResponse对象生成的内容返回给浏览器虽然</p>
<p>Tomcat也可以认为是HTTP服务器，但通常它仍然会和Nginx配合在一起使用：</p>
<p>动静态资源分离——运用Nginx的反向代理功能分发请求：所有动态资源的请求交给Tomcat，而静态资源的请求（例如图片、视频、CSS、JavaScript文件等）则直接由Nginx返回到浏览器，这样能大大减轻Tomcat的压力。负载均衡，当业务压力增大时，可能一个Tomcat的实例不足以处理，那么这时可以启动多个Tomcat实例进行水平扩展，而Nginx的负载均衡功能可以把请求通过算法分发到各个不同的实例进行处理</p>
<p>11.先配置redisConfig，直接使用RedisTemple来编辑Controller。</p>
<p>单机版需要加Redis分布式锁，Redis的set可以实现加锁操作，setnx加key当不存在时，所以这个可以当做是分布式锁。finally释放锁。宕机了，走不到finally，可以设置一个有时间期限的key，考虑到原子性问题：原先的命令SetIfAbsent(lock)改为SetIfAbsent(lock,time),过期时间太短，没做完就删除了key，之后又会删除别人的key，判断key值才可以去删除，但是finally判断和del删除不是原子性的，可以用lua脚本，但是不给用，也可以用Redis事务，MULTI（开启事务命令）、EXEC（结束事务命令）、WATCH（监控）、UNWATCH（解除监控）、WATCH值被修改，EXEC不能成功提交，由此可以使用事务（lua脚本：获取Jedis对象，编写lua脚本，jedis调用eval调用lua脚本），Redis缓存续命（最好情况，自己写）：集群的Redis出现主从复制问题造成锁丢失（保证高可用），但zookeeper（CP，保证高一致性）同步完成才可以运行。RedisSon（Redis的java分布式锁，Redis在JUC包的加强版）RLock对象从redisson获取，调用lock方法和unlock方法，有可能会出现一个不能被当前线程解锁的错误，所以还要进行判断是否被锁且被当前线程锁的。</p>
<p>12.Redis过期淘汰策略：<br>Redis定时删除是立即删除的（CPU太累了还要开启线程解决过期的key）<br>Redis惰性删除，对内存不友好，CPU友好。<br>Redis定期删除，每隔一段时间执行一次删除过期操作，需要合理设置执行时长和执行频率。</p>
<p>查看Redis最大内存配置，没配不限制大小，32位限制3GB。建议最大内存的3/4，可以用配置文件设置，也可以通过命令config set maxmemory来配置，info memory查看目前配置，如果内存爆了会出现OOM。</p>
<p>LRU和LFU和TTL</p>
<p>13.偷懒版LRU，LinkedHashMap（双向链表＋HashMap）。</p>
<p>14.Redis为什么是单线程的？</p>
<p>1.官方答案</p>
<p>因为Redis是基于内存的操作，CPU不是Redis的瓶颈，Redis的瓶颈最有可能是机器内存的大小或者网络带宽。既然单线程容易实现，而且CPU不会成为瓶颈，那就顺理成章地采用单线程的方案了。</p>
<p>LRU：Least Recently Used 最近最少使用</p>
<p>LFU：Least frenquently used 最不经常使用</p>
<p>FIFO：先进先出</p>
<p>3.详细原因</p>
<p>1）不需要各种锁的性能消耗<br>2）单线程多进程集群方案<br>3）CPU消耗</p>
<p>redis 采用网络IO多路复用技术来保证在多连接的时候， 系统的高吞吐量。</p>
<p>多路-指的是多个socket连接，复用-指的是复用一个线程。多路复用主要有三种技术：select，poll，epoll。epoll是最新的也是目前最好的多路复用技术。</p>
]]></content>
  </entry>
  <entry>
    <title>JVM notes</title>
    <url>/2021/02/20/JVM/</url>
    <content><![CDATA[<p>1.类装载器<br>双亲委派机制<br>类。。安全机制</p>
<p>2.引用计数法、复制算法（年轻代，内存只有原来的一半）、标记清除（产生内存碎片）、标记整理（需要支付移动对象的成本）</p>
<p>3.判断是否被回收、引用计数法、枚举根节点做可达性分析（从GCROOT向下查找对象，如果对象没有引用链就被判定为死亡，如果GCroot没有连接到对象，对象相互引用也是无用的）。</p>
<p>4.可以作为GCroot对象（虚拟机栈对象、方法区类静态属性对象、方法区常量对象、本地方法栈native方法引用对象）</p>
<p>5.如何查看JVM系统默认值？jps和jinfo -flags</p>
<p>标配参数(version/help/showversion)、x参数(-Xint解释执行/-Xcomp第一次使用就编译本地代码/-Xmixed混合模式先编译再执行)、XX参数(Boolean类型（-XX:+-某个属性值（+printGCDetails查看GC进程细节））、KV类型（属性key=属性value）)</p>
<p>6.经典参数-Xms和-Xmx？<br>-Xms = -XX：InitialHeapSize<br>-Xmx = -XX：MaxHeapSize</p>
<p>7.查看JVM默认值？<br>java -XX：+PrintFlagsIntial 最原先的默认值<br>java -XX：+PrintFlagsFinal T（运行java类的名字） 修改后的值（有：=为修改过的值）</p>
<p>8.平时工作JVM常用的配置参数有哪些？-Xms（物理内存1/64） 、 -Xmx(物理内存1/4) 、<br>-Xss(单个线程栈大小，一般为512K-1024K，-XX：ThreadStackSize) 、 -Xmn（设置年轻代大小）<br>-XX：MetaspaceSize（设置元空间大小，元空间与永久代类似，都是JVM规范实现，最大区别是元空间不在虚拟机中，而是使用本地内存，元空间受制于本地内存，避免出现OOM的一种）<br>-XX：+printGCDetails（查看GC进程细节，GC和FullGC可以百度自己查找GC内存信息）<br>-XX：SurvivorRatio 设置新生代eden区和s0/s1空间的比例。<br>-XX：NewRatio设置新生代和老年代空间的比例<br>-XX：MaxTenuringThreshold：设置垃圾的最大年龄</p>
<p>9.强引用Reference，当内存不足的时候，就算OOM也不会进行垃圾回收（一般就是普通对象）。</p>
<p>软引用SoftReference，内存不足的时候就会回收，充足就不会回收。SoftReference<Object>，类似于缓存。</p>
<p>弱引用WeakReference，只要有GC就一定会被回收，WeakHashMap，类似于hashMap，但是如果key值为null值后，就会被gc清除掉。</p>
<p>虚引用PhantomReference，如果一个对象有虚引用，那么它和没有任何引用一样，任何时候都可能被垃圾回收器回收。主要作用是跟踪对象。作用：可以当对象进入finalization状态时，在内存中清除出去之前做必要的清理工作。当对象被gc就会放到一个引用队列里，队列里都是虚引用，跟踪状态。</p>
<p>10.异常<br>StackOverflow栈满了，是一种错误，方法递归可能。</p>
<p>OOM异常，是一种错误，JavaHeapSpace，堆爆了，对象太多了，出现了问题。</p>
<p>OOM异常，GC overhead limit exceeded，大量资源用作GC，GC却没有效果。</p>
<p>OOM异常，Direct buffer memory，NIO使用ByteBuffer读取数据，可以使用Native函数库分配堆外内存，因为不用频繁复制，所以很快，但是不归JVM管，当本地内存不够用时就会出现这个异常。</p>
<p>OOM异常，unable to create new native thread，创建了太多的线程，可以考虑是否需要这么多个异常，第二提高linux承载线程数。linux在etc/security/limits.d/90-nproc.conf中设置这个linux数量。</p>
<p>OOM：MetaSapce：metaspace主要存放的信息：虚拟机加载的类信息、常量池、静态变量、即时编译后的代码。</p>
<p>11.GC算法是垃圾回收的方法论，垃圾收集器是算法实现的器具。<br>Serial串行（使用一个线程进行垃圾回收，会暂停所有的用户线程，不适合服务器环境）<br>Parallel并行（多个垃圾收集器并行工作，用户线程是暂停的，适合科学计算）<br>CMS（并发标记垃圾收集器，不一定并行，可以交替执行）<br>G1（将堆内存分割成不同区域然后并发对其进行垃圾回收）</p>
<p>java-XX：PrintCommandLineFlags -version 查看默认垃圾收集器</p>
<p>默认的垃圾收集器有哪些：</p>
<p>UseSerialGC（效率最高但是会暂停，新生代会Serial Copying，老年代Serial MSC）、</p>
<p>UseParallelGC、<br>UseConcMarkSweepGC、</p>
<p>UseParNewGC（串行的并行版本）、UseParallelOldGC、UseG1GC。<br>G1兼顾新生代和老年代。<br>新生代（Serial Copying、Parallel Scavenge、ParNew）<br>老年代（Serial MSC、Parallel Compacting、CMS）</p>
<p>server模式、client模式</p>
<p>12.串行GC、并行GC（只有新生代并行）、并行GC（UseParallelGC新生代和老年代都是并行）、SerialOld（年老代的串行版本、标记整理算法）</p>
<p>CMS（并发标记清除收集器，比较适合互联网、因为响应速度快，停顿时间最短）（初始标记、并发标记、重新标记、并发清除）（优点停顿低、缺点并发执行会增加堆内存压力，同时CMS在老年代要尽快在堆内存用完前使用垃圾回收，否则CMS失败，将触发担保机制、串行老年代收集器会以SWT的方式进行一次GC，会造成较大的停顿时间，同时会出现空间碎片，几次之后可以进行压缩空间）。</p>
<p>13.如何选择垃圾收集器？<br>单CPU或小内存，SerialGC<br>多CPU，需要大吞吐量，如后台计算型应用，UseParallerGC或者UseParallelOldGC<br>多CPU需要低停顿CMS。</p>
<p>14.G1收集器？<br>面向服务端的垃圾收集器。<br>不会出现产生很多碎片、预测停顿时间（停顿时间更短）<br>区域化Region，整体避免了全内存区的GC操作，eden等区不是连续的了。有一个特殊的区域叫humongous（极大对象，类似Old区）<br>eden-&gt;survivor-&gt;old</p>
<p>四步过程：初始标记（只标记GCRoot关联对象）、并发标记（进行GCRoots Tracing）、最终标记（修正并发标记期间，因程序运行导致标记发生变化的那一部分对象）、筛选回收（根据时间进行价值最大化回收）</p>
<p>参数：G1HeapRegionSize（G1区域大小）、MaxGCPauseMills（最大停顿时间）、InitiatingHeapOccurpancyPercant（堆占用多少空间进行GC）、ConcGCThread（并发GC使用线程数）</p>
<p>15.G1和CMS收集器有什么区别？<br>G1没有内存碎片、G1可以指定精确停顿时间。</p>
<p>16.JVM+Springboot调优<br>1打包war包<br>2终端-&gt;java -server 调优参数 war包</p>
<p>17.生产环境服务器变慢、诊断思路和性能评估谈谈</p>
<p>top 查看进程，看CPU和内存，看哪个进程高于60%，变慢的理由。</p>
<p>vmstat -n 2 3（每两秒采样3次）查看CPU，us（用户）+sy（系统）大于80%说明CPU不足。</p>
<p>pidstat -u 1 -p pid 查看每个进程CPU分解信息</p>
<p>free -m 查看内存</p>
<p>df -h 硬盘还剩多少</p>
<p>iostat 磁盘io性能评估（看util：有n%用于磁盘IO，越大越好）</p>
<p>ifstat 网络IO性能评估</p>
<p>操作：top命令找到最高CPU、，ps -ef进一步定位，定位到具体线程，ps -mp 进程号 -o THREAD，tid，time，线程id转化为16进制，jstack 进程ID |grep tid（16进制线程ID小写英文） -A60（前60行）</p>
]]></content>
  </entry>
  <entry>
    <title>Docker notes</title>
    <url>/2021/02/20/docker/</url>
    <content><![CDATA[<p>Docker search搜索</p>
<p>Docker pull下载</p>
<p>Docker images列出所有下载</p>
<p>Docker rmi删除镜像、-f强制删除</p>
<p>docker run -p 80:80 –name nginx -d nginx:1.17.0 新建新的容器</p>
<p>-d选项：表示后台运行</p>
<p>–name选项：指定运行后容器的名字为nginx,之后可以通过名字来操作容器</p>
<p>-p选项：指定端口映射，格式为：hostPort:containerPort</p>
<p>Docker ps列出现在运行的容器</p>
<p>Docker ps -a列出所有容器</p>
<p>Docker stop $ContainerName(或者$ContainerId)停止容器</p>
<p>docker kill $ContainerName(或者$ContainerId)强制停止容器</p>
<p>docker start $ContainerName(或者$ContainerId)启动已停止的容器</p>
<p>docker inspect –format ““ $ContainerName(或者$ContainerId)查询容器pid</p>
<p>nsenter –target “$pid” –mount –uts –ipc –net –pid根据pid进入容器</p>
<p>docker rm $ContainerName(或者$ContainerId)删除容器</p>
<p>docker rm -f $(docker ps -a -q)强制删除所有容器</p>
<p>docker logs $ContainerName(或者$ContainerId)查看当前全部日志</p>
<p>docker logs $ContainerName(或者$ContainerId) -f动态查看当前日志</p>
<p>docker inspect –format ‘‘ $ContainerName(或者$ContainerId）查看容器的ip地址</p>
<p>docker container update –restart=always $ContainerName修改容器启动方式</p>
<p>docker cp /etc/localtime $ContainerName(或者$ContainerId):/etc/同步宿主机时间到容器</p>
<p>docker run -p 80:80 –name nginx \ -e TZ=”Asia/Shanghai” \ -d nginx:1.17.0指定容器时区</p>
<p>docker stats $ContainerName(或者$ContainerId)查看容器使用cpu、内存、网络、io情况</p>
<p>docker stats -a查看所有情况</p>
<p>docker system df查看docker磁盘使用情况</p>
<p>docker exec -it $ContainerName /bin/bash进入docker容器内部的bash</p>
<p>docker exec -it –user root $ContainerName /bin/bash使用root账号进入docker容器内部</p>
<p>docker network create -d bridge my-bridge-network  Docker创建外部网络</p>
<p>修改Docker存放镜像位置</p>
<p>docker info | grep “Docker Root Dir” 查看Docker存放镜像位置</p>
<p>systemctl stop docker关闭docker服务</p>
<p>mv /var/lib/docker /mydata/docker移动目录到目标路径</p>
<p>ln -s /mydata/docker /var/lib/docker建立软连接</p>
<p>2.Docker下运行Java程序</p>
<p>1.创建springboot项目</p>
<p>2.打包springboot项目为jar包</p>
<p>3 编写Dockerfile文件</p>
<blockquote>
<pre><code># Docker image for springboot file run
# VERSION 0.0.1
# Author: eangulee
# 基础镜像使用java
FROM java:8
# 作者
MAINTAINER eangulee &lt;eangulee@gmail.com&gt;
# VOLUME 指定了临时文件目录为/tmp。
# 其效果是在主机 /var/lib/docker 目录下创建了一个临时文件，并链接到容器的/tmp
VOLUME /tmp 
# 将jar包添加到容器中并更名为app.jar
ADD demo-0.0.1-SNAPSHOT.jar app.jar 
# 运行jar包
RUN bash -c &#39;touch /app.jar&#39;
ENTRYPOINT [&quot;java&quot;,&quot;-Djava.security.egd=file:/dev/./urandom&quot;,&quot;-jar&quot;,&quot;/app.jar&quot;]
</code></pre>
<p>VOLUME 指定了临时文件目录为/tmp。其效果是在主机 /var/lib/docker 目录下创建了一个临时文件，并链接到容器的/tmp。该步骤是可选的，如果涉及到文件系统的应用就很有必要了。/tmp目录用来持久化到 Docker 数据文件夹，因为 Spring Boot 使用的内嵌 Tomcat 容器默认使用/tmp作为工作目录</p>
</blockquote>
<p>项目的 jar 文件作为 “app.jar” 添加到容器的</p>
<p>ENTRYPOINT 执行项目 app.jar。为了缩短 Tomcat 启动时间，添加一个系统属性指向 “/dev/./urandom” 作为 Entropy Source</p>
<p>4 部署文件<br><img src="https://upload-images.jianshu.io/upload_images/15536448-9af07900b7686a79.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/360/format/webp"></p>
<p>5.制作镜像</p>
<p>docker build -t springbootdemo4docker .<br>-t 参数是指定此镜像的tag名</p>
<p>6.启动容器</p>
<p>[root@localhost docker]# docker run -d -p 8080:8085 springbootdemo4docker</p>
<p>-d参数是让容器后台运行 </p>
<p>-p 是做端口映射，此时将服务器中的8080端口映射到容器中的8085(项目中端口配置的是8085)端口</p>
<p>7.访问网站</p>
]]></content>
  </entry>
  <entry>
    <title>Github notes</title>
    <url>/2021/02/20/github/</url>
    <content><![CDATA[<p>watch持续动态<br>Fork复制项目<br>star点赞<br>clone克隆<br>follow关注感兴趣作者</p>
<p>in查找<br>关键词 in：name，readme，description<br>star/fork 查找<br>关键词 stars（fork）:&gt;= 数量（100..200在100到200之间） </p>
<p>awesome加强搜索 awesome 关键字</p>
<p>高亮显示 url#L13 第13行（多行#L16-L19）</p>
<p>项目内搜索 </p>
<p>搜索某个地区的大佬：location:地区 language:语言</p>
]]></content>
  </entry>
  <entry>
    <title>hexo notes</title>
    <url>/2021/02/20/hexo/</url>
    <content><![CDATA[<p>从零开始搭建博客</p>
<p>以hexo为主搭建的博客</p>
<p><img src="https://pic4.zhimg.com/v2-a976b66ff0540936624b284730a88d97_1440w.jpg?source=172ae18b"></p>
<p><a href="https://zhuanlan.zhihu.com/p/102592286?tdsourcetag=s_pctim_aiomsg" title="搭建博客详细步骤">https://zhuanlan.zhihu.com/p/102592286?tdsourcetag=s_pctim_aiomsg</a></p>
<p>别人的，但写得很好，分享一下</p>
<p>hexo clean</p>
<p>hexo g</p>
<p>hexo d</p>
]]></content>
  </entry>
  <entry>
    <title>Java notes</title>
    <url>/2021/02/20/java/</url>
    <content><![CDATA[<p>intern 如果String常量池包含了这个String，返回这个对象。java原先就有一个了。</p>
<p>反编译synchronized会多一个minotorexit，保证彻底退出synchronized，synchronized有一个计数器</p>
<p>隐式锁synchronized 显式锁 Lock</p>
<p>LockSupport：类，用于创建锁和其他同步类的基本线程阻塞原语。（人话：线程等待唤醒机制改良加强版 park和unpark阻塞线程和解除阻塞线程）</p>
<p>AQS：AbstractQueueSynchronizer（抽象的队列同步器，核心父类）：通过内置的FIFO队列完成资源获取线程的排队工作，通过int类型变量（子类：ReentranLock、CountDownLatch等锁），阻塞需要排队，排队需要队列。</p>
<p>AQS源码：使用一个volatile的int类型表示变量的同步状态，通过内置的FIFO队列来完成资源的获取的排队工作，将每个消耗资源的线程封装成一个Node节点来实现锁的分配，通过CAS完成对state值的修改（AQS=state+CLH双向队列，Node=waitstate+前后指针，Lock都是实现了sync（队列同步器））。</p>
<p>ReentrantLock：通过tryAcquire方法抢占锁，（加锁过程：尝试获取锁，获取锁失败进入阻塞队列，在阻塞队列中等待（如果忘了<a href="https://www.bilibili.com/video/BV1zb411M7NQ?p=141&spm_id_from=pageDriver">https://www.bilibili.com/video/BV1zb411M7NQ?p=141&amp;spm_id_from=pageDriver</a>））</p>
<p>哨兵节点</p>
<p>阻塞时进行的方法（acquire）：tryAcquire方法（尝试抢占）、addwaiter加入阻塞队列方法（头结点为哨兵节点、不是真实节点、而是占位节点）、acquireQueued（占用队列：判断是否被打断，在尝试抢占一次，失败后，创建队列的头结点，循环一次后再抢占一次，失败后才是真正入队调用LockSupport.park阻塞，但是还没有结束）</p>
<p>unlock：（sync.release()）设置占用线程为null，从阻塞队列获取线程，头指针再次设为0，同时unpark锁，第二个节点变为哨兵节点。</p>
<p>wait和notify的限制：Object的wait和notify方法必须在Synchronized代码块中。要先wait再notify。</p>
<p>Lock的await和notify的限制：也需要在lock代码块里，要先wait再notify。</p>
<p>LockSupport的park和unpark方法：里面有个许可证，如果给了许可证，如同一个信号量加一，但是这个信号量最大为1，所以unpark可以在park之前执行。且不需要再同步代码块里执行，线程阻塞需要消耗凭证，这个凭证只有一个，unpark加凭证，park消耗凭证。</p>
]]></content>
  </entry>
  <entry>
    <title>Real_Java notes</title>
    <url>/2021/02/20/real_java/</url>
    <content><![CDATA[<p>浮点数精度问题：Float和double都有精度问题。</p>
<p>BigDecimal(int) 创建一个具有参数所指定整数值的对象。<br>　　<br>BigDecimal(double) 创建一个具有参数所指定双精度值的对象。<br>　　<br>BigDecimal(long) 创建一个具有参数所指定长整数值的对象。　　</p>
<p>BigDecimal(String) 创建一个具有参数所指定以字符串表示的数值的对象。</p>
<p>所创建的new BigDecimal(a);并不正好等一0.1，而是　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　0.1000000000000000055511151231257827021181583404541015625</p>
<p>BigDecimal保证精度的解决思路其实极其的简单朴素，还是用一句话来解释：十进制整数在转化成二进制数时不会有精度问题，那么把十进制小数扩大N倍让它在整数的维度上进行计算，并保留相应的精度信息。</p>
]]></content>
  </entry>
  <entry>
    <title>mysql notes</title>
    <url>/2021/02/20/mysql/</url>
    <content><![CDATA[<p>Q：刚刚我们聊到B+ Tree ，那你知道B+ Tree的叶子节点都可以存哪些东西吗？</p>
<p>A：InnoDB的B+ Tree可能存储的是整行数据，也有可能是主键的值</p>
<p>Q：那这两者有什么区别吗？ </p>
<p>A：（当他问我叶子节点的时候，其实我就猜到他可能要问我聚簇索引和非聚簇索引了）在 InnoDB 里，索引B+ Tree的叶子节点存储了整行数据的是主键索引，也被称之为聚簇索引。而索引B+ Tree的叶子节点存储了主键的值的是非主键索引，也被称之为非聚簇索引</p>
<p>Q：那么，聚簇索引和非聚簇索引，在查询数据的时候有区别吗？</p>
<p>A：聚簇索引查询会更快？</p>
<p>Q：为什么呢？ </p>
<p>A：因为主键索引树的叶子节点直接就是我们要查询的整行数据了。而非主键索引的叶子节点是主键的值，查到主键的值以后，还需要再通过主键的值再进行一次查询</p>
<p>Q：刚刚你提到主键索引查询只会查一次，而非主键索引需要回表查询多次。（后来我才知道，原来这个过程叫做回表）是所有情况都是这样的吗？非主键索引一定会查询多次吗？</p>
<p>A：（额、这个问题我回答的不好，后来我自己查资料才知道，通过覆盖索引也可以只查询一次）</p>
<p>覆盖索引？</p>
<p>覆盖索引（covering index）指一个查询语句的执行只用从索引中就能够取得，不必从数据表中读取。也可以称之为实现了索引覆盖。</p>
<p>当一条查询语句符合覆盖索引条件时，MySQL只需要通过索引就可以返回查询所需要的数据，这样避免了查到索引后再返回表操作，减少I/O提高效率。</p>
<p>如，表covering_index_sample中有一个普通索引 idx_key1_key2(key1,key2)。</p>
<p>当我们通过SQL语句：select key2 from covering_index_sample where key1 = ‘keytest’;的时候，就可以通过覆盖索引查询，无需回表。</p>
<p>3</p>
<p>联合索引、最左前缀匹配</p>
<p>Q：不知道的话没关系，想问一下，你们在创建索引的时候都会考虑哪些因素呢？</p>
<p>A：我们一般对于查询概率比较高，经常作为where条件的字段设置索引</p>
<p>Q： 那你们有用过联合索引吗？ </p>
<p>A：用过呀，我们有对一些表中创建过联合索引</p>
<p>Q：那你们在创建联合索引的时候，需要做联合索引多个字段之间顺序你们是如何选择的呢？ </p>
<p>A：我们把识别度最高的字段放到最前面</p>
<p>Q：为什么这么做呢？</p>
<p>A：（这个问题有点把我问蒙了，稍微有些慌乱）这样的话可能命中率会高一点吧。。。</p>
<p>Q： 那你知道最左前缀匹配吗？</p>
<p>A：（我突然想起来原来面试官是想问这个，怪自己刚刚为什么就没想到这个呢。）哦哦哦。您刚刚问的是这个意思啊，在创建多列索引时，我们根据业务需求，where子句中使用最频繁的一列放在最左边，因为MySQL索引查询会遵循最左前缀匹配的原则，即最左优先，在检索数据时从联合索引的最左边开始匹配。所以当我们创建一个联合索引的时候，如(key1,key2,key3)，相当于创建了（key1）、(key1,key2)和(key1,key2,key3)三个索引，这就是最左匹配原则</p>
<p>虽然我一开始有点懵，没有联想到最左前缀匹配，但是面试官还是引导了我。很友善。</p>
<p>4</p>
<p>索引下推、查询优化</p>
<p>Q：你们线上用的MySQL是哪个版本啊呢？ </p>
<p>A：我们MySQL是5.7 </p>
<p>Q：那你知道在MySQL 5.6中，对索引做了哪些优化吗？ </p>
<p>A：不好意思，这个我没有去了解过。（事后我查了一下，有一个比较重要的 ：Index Condition Pushdown Optimization）</p>
<p>Index Condition Pushdown（索引下推）</p>
<p>MySQL 5.6引入了索引下推优化，默认开启，使用SET optimizer_switch = ‘index_condition_pushdown=off’;可以将其关闭。官方文档中给的例子和解释如下：</p>
<p>people表中（zipcode，lastname，firstname）构成一个索引</p>
<p>SELECT * FROM people WHERE zipcode=’95054’ AND lastname LIKE ‘%etrunia%’ AND address LIKE ‘%Main Street%’;</p>
<p>如果没有使用索引下推技术，则MySQL会通过zipcode=’95054’从存储引擎中查询对应的数据，返回到MySQL服务端，然后MySQL服务端基于lastname LIKE ‘%etrunia%’和address LIKE ‘%Main Street%’来判断数据是否符合条件。</p>
<p>如果使用了索引下推技术，则MYSQL首先会返回符合zipcode=’95054’的索引，然后根据lastname LIKE ‘%etrunia%’和address LIKE ‘%Main Street%’来判断索引是否符合条件。如果符合条件，则根据该索引来定位对应的数据，如果不符合，则直接reject掉。有了索引下推优化，可以在有like条件查询的情况下，减少回表次数。</p>
<p>Q：你们创建的那么多索引，到底有没有生效，或者说你们的SQL语句有没有使用索引查询你们有统计过吗？</p>
<p>A：这个还没有统计过，除非遇到慢SQL的时候我们才会去排查 </p>
<p>Q：那排查的时候，有什么手段可以知道有没有走索引查询呢？</p>
<p>A：可以通过explain查看sql语句的执行计划，通过执行计划来分析索引使用情况</p>
<p>Q：那什么情况下会发生明明创建了索引，但是执行的时候并没有通过索引呢？ </p>
<p>A：（大概记得和优化器有关，但是这个问题并没有回答好）</p>
<p>查询优化器？</p>
<p>一条SQL语句的查询，可以有不同的执行方案，至于最终选择哪种方案，需要通过优化器进行选择，选择执行成本最低的方案。</p>
<p>在一条单表查询语句真正执行之前，MySQL的查询优化器会找出执行该语句所有可能使用的方案，对比之后找出成本最低的方案。</p>
<p>这个成本最低的方案就是所谓的执行计划。优化过程大致如下：</p>
<p>1、根据搜索条件，找出所有可能使用的索引 </p>
<p>2、计算全表扫描的代价 </p>
<p>3、计算使用不同索引执行查询的代价 </p>
<p>4、对比各种执行方案的代价，找出成本最低的那一个</p>
<p>Q：哦，索引有关的知识我们暂时就问这么多吧。你们线上数据的事务隔离级别是什么呀？ </p>
<p>A：(后面关于事务隔离级别的问题了，就不展开了).</p>
<p>mysql优先查询：<br>SELECT *<br>FROM person<br>ORDER BY<br>CASE<br>    WHEN age&gt;=30 and age&lt;=40 THEN<br>        0<br>    ELSE<br>        1<br>END;</p>
<p>sql语句安全性</p>
<p>1.防止sql注入,对特殊字符进行转译与过滤,使用sql语句绑定变量</p>
<p>2.最小用户权限设置,最好不要使用root用户连接数据库</p>
<p>3.当sql运行出错的时候,不要将错误信息全部显示给用户</p>
]]></content>
  </entry>
  <entry>
    <title>设计模式六大原则</title>
    <url>/2021/02/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99/</url>
    <content><![CDATA[<p>1.单一原则（Single Responsibility Principle）：一个类或者一个方法只负责一项职责，尽量做到类的只有一个行为原因引起变化；</p>
<p>　　a、业务对象（BO business object）、业务逻辑（BL business logic）拆分；</p>
<p>2.里氏替换原则（LSP liskov substitution principle）：子类可以扩展父类的功能，但不能改变原有父类的功能；（本质其实就是c++的多态）</p>
<p>　　（目的：增强程序的健壮性）实际项目中，每个子类对应不同的业务含义，使父类作为参数，传递不同的子类完成不同的业务逻辑。</p>
<p>3.依赖倒置原则（dependence inversion principle）：面向接口编程；（通过接口作为参数实现应用场景）</p>
<p>　　抽象就是接口或者抽象类，细节就是实现类</p>
<p>　　含义：</p>
<p>　　　　上层模块不应该依赖下层模块，两者应依赖其抽象；</p>
<p>　　　　抽象不应该依赖细节，细节应该依赖抽象；</p>
<p>通俗点就是说变量或者传参数，尽量使用抽象类，或者接口；</p>
<p>【接口负责定义public属性和方法，并且申明与其他对象依赖关系，抽象类负责公共构造部分的实现，实现类准确的实现业务逻辑】</p>
<p>4.接口隔离（interface segregation principle）：建立单一接口；（扩展为类也是一种接口，一切皆接口）</p>
<p>　　　定义：</p>
<p>　　　　a.客户端不应该依赖它不需要的接口；</p>
<p>　　　　b.类之间依赖关系应该建立在最小的接口上；</p>
<p>简单理解：复杂的接口，根据业务拆分成多个简单接口；（对于有些业务的拆分多看看适配器的应用）</p>
<p>　【接口的设计粒度越小，系统越灵活，但是灵活的同时结构复杂性提高，开发难度也会变大，维护性降低】　　　</p>
<p>5.迪米特原则（law of demeter LOD）：最少知道原则，尽量降低类与类之间的耦合；</p>
<p>一个对象应该对其他对象有最少的了解</p>
<p>　　</p>
<p>6.开闭原则（open closed principle）：用抽象构建架构，用实现扩展原则；（总纲）</p>
<p>（solid稳定的  记忆首字母）</p>
<pre><code>单例模式：
懒汉单例（synchronized和双重检测）和饿汉单例(final和voliate)
应用场景：日志和连接池等能公用且创建消耗资源的。当对象含有可改变的状态时就用多例。

策略模式：
应用场景：多个类只有在算法不同的场景、一个系统有许多类，而区分它们的只是他们直接的行为时。
如果一个系统的策略多于四个，就需要考虑使用混合模式来解决策略类膨胀的问题。
算法的选择由客户端决定，但是要客户了解全部策略，增加客户端使用难度。

代理模式：
动态代理和静态代理：
静态代理：调用代理类对真实类进行调用，没有动态代理灵活，只能服务一个类。
动态代理：
Jdk动态代理：
基于拦截器和反射实现的。生成一个实现代理接口的匿名类，在调用具体方法前调用InvokeHandler来处理。
使用条件
1）必须实现InvocationHandler接口；
2）使用Proxy.newProxyInstance产生代理对象；
3）被代理的对象必须要实现接口；
需要实现接口，因为Proxy.newProxyInstance需要接口作为参数传递进去。
代理类需要继承接口InvocationHandler，同时重写代理类的invoke方法，通过反射获得方法，使用invoke。
Cglib动态代理：
利用开源包，把代理对象的class文件加载进来，修改其字节码生成子类处理。
创建增强类enhancer，并以被代理类作为父类（setsuperclass），设置代理类cglibproxy代理类回调，通过enhancer返回一个被代理类，调用被代理类则实现了增强。
子类来作为增强的方法，代理类需要继承MethodInterceptor接口，并重写intercept
方法。methodProxy.invokeSuper();
2.何时使用JDK或者CGLIB？
1）如果目标对象实现了接口，默认情况下会采用JDK的动态代理实现AOP。
2）如果目标对象实现了接口，可以强制使用CGLIB实现AOP。
3） 如果目标对象没有实现了接口，必须采用CGLIB库，Spring会自动在JDK动态代理和CGLIB之间转换。
JDK代理是不需要第三方库支持，只需要JDK环境就可以进行代理CGLib必须依赖于CGLib的类库，但是它需要类来实现任何接口代理的是指定的类生成一个子类，覆盖其中的方法，是一种继承。
3. JDK动态代理和CGLIB字节码生成的区别？
1）JDK动态代理只能对实现了接口的类生成代理，而不能针对类。
2）CGLIB是针对类实现代理，主要是对指定的类生成一个子类，覆盖其中的方法，并覆盖其中方法实现增强，但是因为采用的是继承，所以该类或方法最好不要声明成final，对于final类或方法，是无法继承的。
4.CGlib比JDK快？
1）使用CGLib实现动态代理，CGLib底层采用ASM字节码生成框架，使用字节码技术生成代理类，在jdk6之前比使用Java反射效率要高。唯一需要注意的是，CGLib不能对声明为final的方法进行代理，因为CGLib原理是动态生成被代理类的子类。
2）在jdk6、jdk7、jdk8逐步对JDK动态代理优化之后，在调用次数较少的情况下，JDK代理效率高于CGLIB代理效率，只有当进行大量调用的时候，jdk6和jdk7比CGLIB代理效率低一点，但是到jdk8的时候，jdk代理效率高于CGLIB代理，
总之，每一次jdk版本升级，jdk代理效率都得到提升，而CGLIB代理消息确有点跟不上步伐。
5.Spring如何选择用JDK还是CGLIB？
1）当Bean实现接口时，Spring就会用JDK的动态代理。
2）当Bean没有实现接口时，Spring使用CGlib是实现。
3）可以强制使用CGlib（在spring配置中加入&lt;aop:aspectj-autoproxy proxy-target-class=“true”/&gt;）。

装饰模式：
动态的给现有的对象添加一些额外的职责，不改变原来的结构。
优点：装饰类和被装饰类可以独立发展，不会相互耦合，装饰模式是继承的一个替代模式，装饰模式可以动态扩展一个实现类的功能。
缺点：多层装饰比较复杂。
实现：
一个抽象类
一个被装饰类继承这个抽象类
一个装饰抽象类继承这个抽象类，抽象类包含了一个抽象类对象（实际是包含被装饰类和装饰类）
多个装饰类继承这个装饰抽象类
实现方法new 装饰类（new 被装饰类），为什么可以呢？通过反递归的方法，对上级一直探寻，直到找到真正的被装饰类。
1、装饰器模式强调的是增强自身，在被装饰之后你能够在被增强的类上使用增强后的功能。增强后你还是你，只不过能力更强了而已；代理模式强调要让别人帮你去做一些本身与你业务没有太多关系的职责（记录日志、设置缓存）。代理模式是为了实现对象的控制，因为被代理的对象往往难以直接获得或者是其内部不想暴露出来。
2、装饰模式是以对客户端透明的方式扩展对象的功能，是继承方案的一个替代方案；代理模式则是给一个对象提供一个代理对象，并由代理对象来控制对原有对象的引用；
3、装饰模式是为装饰的对象增强功能；而代理模式对代理的对象施加控制，但不对对象本身的功能进行增强；

观察者模式：
继承Observer类，重写Update方法和构造方法，在main方法中创建继承类并赋值被观察者，被观察者一旦发生改变，观察者就会根据发生的变化而进行相应的改变。
例如：maven的依赖，当一个依赖发生改变，别的依赖也会发生相应的变化。
</code></pre>
]]></content>
  </entry>
  <entry>
    <title>Spring notes</title>
    <url>/2021/02/20/spring/</url>
    <content><![CDATA[<p>1.AOP常用注解：@Before、@After、@AfterReturning、@AfterThrowing、@Around、@Aspect<br>类似@Before（“execuion（ServiceImpl）.*”）,@Around要加上ProceedingJoinPoint.procedd()</p>
<p>spring4执行顺序：@Before、@After、@AfterReturning（异常@Before、@After、@AfterThrowing）</p>
<p>spring5执行顺序：@Before、@AfterReturning、@After（@Before、@AfterThrowing、@After）</p>
<p>2.循环依赖：BeanA依赖BeanB、BeanB依赖BeanC、BeanC依赖BeanA。<br>纯Java可以使用setter注入解决，比如setA（B）；<br>spring中singleton支持循环依赖 prototype不支持循环依赖，通过3级缓存解决循环依赖，DefaultSingletonBeanRegistry</p>
<p>一级缓存singletonObjects（存放完整对象（Bean名，内存地址）），二级缓存earlySingletonObjects（存放属性未填充完整的对象（Bean名，内存地址）），三级缓存SingletonFactories（存放生产Bean的工厂(Bean名，lambda表达式)）（只有单例才能被复用，所以只有单例能使用三级缓存）</p>
<p>getsingleton（从一级缓存获取单例）、docreateBean（创建依赖Bean）、addsingleFactory（将Bean加入三级缓存）、populateBean（初始化Bean）、addSingleton（把Bean加入一级缓存）<br>是否可以二级缓存、一级缓存，是否需要循环依赖。</p>
<p>spring初始方法就是refresh</p>
]]></content>
  </entry>
  <entry>
    <title>Vue</title>
    <url>/2021/02/20/vue/</url>
    <content><![CDATA[<p>var app = new Vue({})</p>
<p>el属性、data属性、[]数组、对象{}，</p>
<p>“#”为id选择器</p>
<p>Vue实例作用范围：Vue管理el选项命中的元素</p>
<p>双标签：不能作用于Html和Body</p>
<p>数组：push插入数组元素、splice删除数组元素</p>
<p>Vue指令：</p>
<p>v-text或{}：文本属性</p>
<p>v-html：翻译成html属性</p>
<p>v-on或@：为元素绑定事件</p>
<p>v-show：根据表达式真假，切换显示和隐藏（直接删除）</p>
<p>v-if：根据表达式真假，切换显示和隐藏（更换样式（本质是操纵dom元素））</p>
<p>v-bind或者：：设置元素属性（v-bind:src=”属性名”）</p>
<p>v-for：循环，v-for=”item in arr”</p>
<p>v-on:传递自定义参数，事件修饰符</p>
<p>v-model：双向数据绑定，获取和设置表单元素。</p>
<p>网络应用：</p>
<p>axios：</p>
<p>axios.get()：get请求</p>
<p>axios.post():post请求</p>
<p>then：后续处理:处理应答请求(function(response))、处理错误请求(function(err))</p>
<p>回调函数内不能用this，可以用that=this，获取this地址</p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/02/12/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
</search>
